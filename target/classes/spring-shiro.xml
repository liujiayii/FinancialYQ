<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-4.0.xsd"
	default-lazy-init="true">
	<!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->
	 <bean id="ShiroRealm" class="com.fendo.shiro.ShiroRealm">
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
			
				<property name="hashAlgorithmName" value="MD5"></property>
			
				<property name="hashIterations" value="1024"></property>
			</bean>
		</property>
	</bean> 
	

	<!-- 定义缓存管理器 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" />
	<bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- session的失效时长，单位毫秒 -->
		<property name="globalSessionTimeout" value="7200000" />
		<!-- 删除失效的session -->
		<property name="deleteInvalidSessions" value="true" />
	</bean>

	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="ShiroRealm" />
		<!-- 使用配置的缓存管理器 -->
		<property name="cacheManager" ref="cacheManager"></property>
		<!-- 会话管理 -->
		<property name="sessionManager" ref="sessionManager" />
	</bean>

	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
		<property name="loginUrl" value="/toLogin.action" />
		<!-- 登录成功后要跳转的页面 -->
		<property name="successUrl" value="/login.action" />
		<!-- 用户访问未对其授权的资源时,所显示的连接 -->
		<property name="unauthorizedUrl" value="/pages/error/error.jsp" />
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
		<!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
		<!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
		<property name="filterChainDefinitions">
			<value>
				<!-- 对静态资源设置允许匿名访问 -->
				/toLogin.action =anon
				/loginTwo.action =anon
				/showAuthCode.action=anon
				/login_handle.action =anon
				/login/** = anon
				/static/** = anon
				/pages/layout/**= anon
				/popedom/login.action=anon
				/login.action=anon

				/js/**= anon
				/css/**== anon
				/images/**=anon
				/fonts/**=anon
				
				<!-- 风控全部列表  -->
				/pages/customerInfo/carResources.jsp* =perms[client:carResources]
				<!-- 已审核-->
				/pages/customerInfo/buyingCarConsult.jsp* =perms[client:carConsult ]
				<!-- 未审核 -->
				/pages/customerInfo/replaceCar.jsp* =perms[client:carPermute]
				<!-- 已打回 -->
				/pages/tradeManage/evaluation.jsp* =perms[deal:assess]
				<!-- 已作废 -->
				/pages/tradeManage/insurance.jsp* =perms[deal:insurance]
				<!-- 审核 -->
				/pages/tradeManage/stateManage.jsp* =perms[deal:stages]
				<!-- 打印 -->
				/pages/carSales/booking.jsp* =perms[sell:orderCar]
				<!-- 作废 -->
				/pages/carSales/carSales.jsp* =perms[sell:sellCar]
				<!-- 退车管理 -->
				
				<!-- 员工管理 -->
				/pages/carManage/carManage.jsp* =perms[car:management]
				<!-- 收入管理 -->
				/pages/carManage/carinformation.jsp* =perms[car:message]
				<!-- 支出管理 -->
				/pages/financialManage/income.jsp* =perms[finance:income]
				<!-- 标的管理 -->
				/pages/financialManage/expend.jsp* =perms[finance:expend]
				<!-- 公司管理 -->
				/pages/financialManage/branch.jsp* =perms[finance:department]
				<!-- 收入通过按钮 -->
				/pages/inventoryManage/stock.jsp* =perms[inventory:particulars]
				<!-- 支出通过按钮 -->
				/pages/inventoryManage/inventoryManage.jsp* =perms[inventory:record]
				<!-- 个人信息 -->
				/pages/personManage/staffManage.jsp* =perms[company:management]
				<!-- 公司信息 -->
				/pages/personManage/accessManage.jsp* =perms[company:popedom]
				/popedom/**=anon
				/findByPass.action=anon
				/pages/personManage/home_page.jsp*=anon
				/pages/personManage/financialStaff.jsp*=anon
				<!-- 剩余其他路径，必须认证通过才可以访问 -->
                 /** = anon 
                 
                  

                 <!-- /** = authc -->  

			</value>
		</property>
	</bean>

	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->
	<!-- 配置以下两个bean即可实现此功能 -->
	<!-- Enable Shiro Annotations for Spring-configured beans. Only run after 
		the lifecycleBeanProcessor has run -->
	<!-- 由于本例中并未使用Shiro注解,故注释掉这两个bean(个人觉得将权限通过注解的方式硬编码在程序中,查看起来不是很方便,没必要使用) -->
	<!-- <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" 
		depends-on="lifecycleBeanPostProcessor"/> <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"> 
		<property name="securityManager" ref="securityManager"/> </bean> -->
</beans>  
 
